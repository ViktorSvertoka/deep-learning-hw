# -*- coding: utf-8 -*-
"""dz_topic_4_svertoka_viktor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EHpUQberbRwT1cTdur0ZKVvDy1wOYhwP
"""

import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import TensorDataset, DataLoader

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# –Ø–∫—â–æ –Ω–∞ Kaggle: –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å kaggle API, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—è —ñ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–∞—Ç–∞—Å–µ—Ç
!pip install -q kagglehub
import kagglehub

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
path = kagglehub.dataset_download("mchilamwar/predict-concrete-strength")

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
df = pd.read_csv("ConcreteStrengthData.csv")

# –û–∑–Ω–∞–π–æ–º–ª–µ–Ω–Ω—è –∑ –¥–∞–Ω–∏–º–∏
df.head()
df.info()
df.describe()
sns.pairplot(df)

# –¶—ñ–ª—å–æ–≤–∞ –∑–º—ñ–Ω–Ω–∞ ‚Äî –º—ñ—Ü–Ω—ñ—Å—Ç—å –±–µ—Ç–æ–Ω—É (last column)
X = df.iloc[:, :-1].values
y = df.iloc[:, -1].values

# –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏–π —ñ —Ç–µ—Å—Ç–æ–≤–∏–π –Ω–∞–±–æ—Ä–∏
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —É —Ç–µ–Ω–∑–æ—Ä–∏
X_train_tensor = torch.tensor(X_train, dtype=torch.float32)
y_train_tensor = torch.tensor(y_train, dtype=torch.float32).view(-1, 1)
X_test_tensor = torch.tensor(X_test, dtype=torch.float32)
y_test_tensor = torch.tensor(y_test, dtype=torch.float32).view(-1, 1)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è DataLoader
train_dataset = TensorDataset(X_train_tensor, y_train_tensor)
train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)

# –ö–ª–∞—Å –Ω–µ–π—Ä–æ–Ω–Ω–æ—ó –º–µ—Ä–µ–∂—ñ
class ConcreteNet(nn.Module):
    def __init__(self):
        super(ConcreteNet, self).__init__()
        self.net = nn.Sequential(
            nn.Linear(8, 64),
            nn.ReLU(),
            nn.Linear(64, 32),
            nn.ReLU(),
            nn.Linear(32, 1)
        )

    def forward(self, x):
        return self.net(x)

model = ConcreteNet()

# –§—É–Ω–∫—Ü—ñ—è –≤—Ç—Ä–∞—Ç —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ç–æ—Ä
criterion = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# –ù–∞–≤—á–∞–Ω–Ω—è
epochs = 100
losses = []

for epoch in range(epochs):
    epoch_loss = 0
    for inputs, targets in train_loader:
        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs, targets)
        loss.backward()
        optimizer.step()
        epoch_loss += loss.item()
    losses.append(epoch_loss / len(train_loader))
    if (epoch+1) % 10 == 0:
        print(f"Epoch {epoch+1}/{epochs}, Loss: {epoch_loss/len(train_loader):.4f}")

plt.plot(losses)
plt.xlabel("Epoch")
plt.ylabel("Loss (MSE)")
plt.title("–ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ")
plt.grid(True)
plt.show()

model.eval()
with torch.no_grad():
    y_pred = model(X_test_tensor).numpy()

mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"MSE: {mse:.2f}")
print(f"MAE: {mae:.2f}")
print(f"R^2: {r2:.2f}")

plt.figure(figsize=(10,6))
plt.scatter(y_test, y_pred, alpha=0.6)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.xlabel("–§–∞–∫—Ç–∏—á–Ω–∞ –º—ñ—Ü–Ω—ñ—Å—Ç—å")
plt.ylabel("–ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∞ –º—ñ—Ü–Ω—ñ—Å—Ç—å")
plt.title("–§–∞–∫—Ç–∏—á–Ω—ñ vs –ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è")
plt.grid(True)
plt.show()

print("""
üìå –í–∏—Å–Ω–æ–≤–∫–∏

üîπ MSE = 41.84 ‚Äî —Ü–µ **—Ö–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç**: –º–æ–¥–µ–ª—å –¥–æ—Å–∏—Ç—å —Ç–æ—á–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑—É—î –º—ñ—Ü–Ω—ñ—Å—Ç—å –±–µ—Ç–æ–Ω—É, —Ö–æ—á–∞ –∑–∞–ª–∏—à–∏–≤—Å—è –ø—Ä–æ—Å—Ç—ñ—Ä –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ—ó –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó.

üîπ MAE = 5.17 ‚Äî —Ü–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è **–Ω–∞ –º–µ–∂—ñ –º—ñ–∂ —Ö–æ—Ä–æ—à–∏–º —ñ –≤—ñ–¥–º—ñ–Ω–Ω–∏–º —Ä—ñ–≤–Ω–µ–º**, —Ç–æ–±—Ç–æ –≤ —Å–µ—Ä–µ–¥–Ω—å–æ–º—É –º–æ–¥–µ–ª—å –ø–æ–º–∏–ª—è—î—Ç—å—Å—è –Ω–∞ ~5 –æ–¥–∏–Ω–∏—Ü—å –º—ñ—Ü–Ω–æ—Å—Ç—ñ.

üîπ R¬≤ = 0.84 ‚Äî —Ü–µ **–≤—ñ–¥–º—ñ–Ω–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç**, —è–∫–∏–π –≤–∫–∞–∑—É—î, —â–æ –º–æ–¥–µ–ª—å –¥–æ–±—Ä–µ –ø–æ—è—Å–Ω—é—î –≤–∞—Ä—ñ–∞—Ü—ñ—é –≤ –¥–∞–Ω–∏—Ö —ñ –º–∞—î –≤–∏—Å–æ–∫—É –ø—Ä–æ–≥–Ω–æ—Å—Ç–∏—á–Ω—É –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å.

üìä –ê–Ω–∞–ª—ñ–∑ –∫–æ—Ä–µ–ª—è—Ü—ñ—ó –æ–∑–Ω–∞–∫ –ø–æ–∫–∞–∑—É—î, —â–æ –Ω–∞–π–±—ñ–ª—å—à–∏–π –≤–ø–ª–∏–≤ –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω—É –º—ñ—Ü–Ω—ñ—Å—Ç—å –º–∞—é—Ç—å —Ç–∞–∫—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —è–∫ Cement, Age —Ç–∞ Water. –¶–µ —É–∑–≥–æ–¥–∂—É—î—Ç—å—Å—è –∑ –±—É–¥—ñ–≤–µ–ª—å–Ω–∏–º–∏ –Ω–æ—Ä–º–∞–º–∏ —Ç–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è–º–∏.
""")